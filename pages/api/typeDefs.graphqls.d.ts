/* 824f0584407e87a66914521c0b165149fc591403
 * This file is automatically generated by graphql-let. */

import { GraphQLResolveInfo } from 'graphql';
export declare type Maybe<T> = T | null;
export declare type Exact<T extends {
    [key: string]: any;
}> = {
    [K in keyof T]: T[K];
};
export declare type RequireFields<T, K extends keyof T> = {
    [X in Exclude<keyof T, K>]?: T[X];
} & {
    [P in K]-?: NonNullable<T[P]>;
};
/** All built-in and custom scalars, mapped to their actual values */
export declare type Scalars = {
    ID: string;
    String: string;
    Boolean: boolean;
    Int: number;
    Float: number;
};
export declare type AuthPayload = {
    __typename?: 'AuthPayload';
    token?: Maybe<Scalars['String']>;
    user?: Maybe<User>;
    message?: Maybe<Scalars['String']>;
};
export declare type Mutation = {
    __typename?: 'Mutation';
    createProject: Project;
    createTask: Task;
    createTech: Tech;
    createUser: AuthPayload;
    deleteProject: Project;
    deleteTask: Task;
    deleteTech: Tech;
    deleteUser?: Maybe<User>;
    updateProject: Project;
    updateTask: Task;
    updateTech: Tech;
    updateUser: User;
    signIn: AuthPayload;
};
export declare type MutationCreateProjectArgs = {
    beschreibung: Scalars['String'];
    name: Scalars['String'];
    url: Scalars['String'];
    click: Scalars['String'];
};
export declare type MutationCreateTaskArgs = {
    beschreibung: Scalars['String'];
    code: Scalars['String'];
    name: Scalars['String'];
    click: Scalars['String'];
};
export declare type MutationCreateTechArgs = {
    beschreibung: Scalars['String'];
    name: Scalars['String'];
    pic: Scalars['String'];
};
export declare type MutationCreateUserArgs = {
    email: Scalars['String'];
    nachname: Scalars['String'];
    password: Scalars['String'];
    title: Scalars['String'];
};
export declare type MutationDeleteProjectArgs = {
    projectId: Scalars['Int'];
};
export declare type MutationDeleteTaskArgs = {
    taskId: Scalars['Int'];
};
export declare type MutationDeleteTechArgs = {
    techId: Scalars['Int'];
};
export declare type MutationDeleteUserArgs = {
    userId: Scalars['Int'];
};
export declare type MutationUpdateProjectArgs = {
    beschreibung: Scalars['String'];
    name: Scalars['String'];
    oldName: Scalars['String'];
    url: Scalars['String'];
    click: Scalars['String'];
};
export declare type MutationUpdateTaskArgs = {
    beschreibung: Scalars['String'];
    code: Scalars['String'];
    name: Scalars['String'];
    oldName: Scalars['String'];
    click: Scalars['String'];
};
export declare type MutationUpdateTechArgs = {
    beschreibung: Scalars['String'];
    name: Scalars['String'];
    oldName: Scalars['String'];
    pic: Scalars['String'];
};
export declare type MutationUpdateUserArgs = {
    email: Scalars['String'];
    nachname: Scalars['String'];
    oldMail: Scalars['String'];
    password: Scalars['String'];
    title: Scalars['String'];
};
export declare type MutationSignInArgs = {
    email: Scalars['String'];
    password: Scalars['String'];
};
export declare type Project = {
    __typename?: 'Project';
    beschreibung?: Maybe<Scalars['String']>;
    id: Scalars['Int'];
    name: Scalars['String'];
    url: Scalars['String'];
    click: Scalars['String'];
};
export declare type Query = {
    __typename?: 'Query';
    allProjects: Array<Project>;
    allTasks: Array<Task>;
    allTechs: Array<Tech>;
    allUsers: Array<User>;
    allTaskIds: Array<Taskid>;
    getProject: Project;
    getTask: Task;
    getTech: Tech;
    getUser: User;
};
export declare type QueryGetProjectArgs = {
    name: Scalars['String'];
};
export declare type QueryGetTaskArgs = {
    name: Scalars['String'];
};
export declare type QueryGetTechArgs = {
    name: Scalars['String'];
};
export declare type Task = {
    __typename?: 'Task';
    id: Scalars['Int'];
    name: Scalars['String'];
    beschreibung: Scalars['String'];
    code: Scalars['String'];
    click: Scalars['String'];
};
export declare type Taskid = {
    __typename?: 'Taskid';
    name: Scalars['String'];
};
export declare type Tech = {
    __typename?: 'Tech';
    beschreibung?: Maybe<Scalars['String']>;
    id: Scalars['Int'];
    name: Scalars['String'];
    pic: Scalars['String'];
};
export declare type User = {
    __typename?: 'User';
    email: Scalars['String'];
    id: Scalars['Int'];
    nachname: Scalars['String'];
    password: Scalars['String'];
    title?: Maybe<Scalars['String']>;
};
export declare type ResolverTypeWrapper<T> = Promise<T> | T;
export declare type LegacyStitchingResolver<TResult, TParent, TContext, TArgs> = {
    fragment: string;
    resolve: ResolverFn<TResult, TParent, TContext, TArgs>;
};
export declare type NewStitchingResolver<TResult, TParent, TContext, TArgs> = {
    selectionSet: string;
    resolve: ResolverFn<TResult, TParent, TContext, TArgs>;
};
export declare type StitchingResolver<TResult, TParent, TContext, TArgs> = LegacyStitchingResolver<TResult, TParent, TContext, TArgs> | NewStitchingResolver<TResult, TParent, TContext, TArgs>;
export declare type Resolver<TResult, TParent = {}, TContext = {}, TArgs = {}> = ResolverFn<TResult, TParent, TContext, TArgs> | StitchingResolver<TResult, TParent, TContext, TArgs>;
export declare type ResolverFn<TResult, TParent, TContext, TArgs> = (parent: TParent, args: TArgs, context: TContext, info: GraphQLResolveInfo) => Promise<TResult> | TResult;
export declare type SubscriptionSubscribeFn<TResult, TParent, TContext, TArgs> = (parent: TParent, args: TArgs, context: TContext, info: GraphQLResolveInfo) => AsyncIterator<TResult> | Promise<AsyncIterator<TResult>>;
export declare type SubscriptionResolveFn<TResult, TParent, TContext, TArgs> = (parent: TParent, args: TArgs, context: TContext, info: GraphQLResolveInfo) => TResult | Promise<TResult>;
export interface SubscriptionSubscriberObject<TResult, TKey extends string, TParent, TContext, TArgs> {
    subscribe: SubscriptionSubscribeFn<{
        [key in TKey]: TResult;
    }, TParent, TContext, TArgs>;
    resolve?: SubscriptionResolveFn<TResult, {
        [key in TKey]: TResult;
    }, TContext, TArgs>;
}
export interface SubscriptionResolverObject<TResult, TParent, TContext, TArgs> {
    subscribe: SubscriptionSubscribeFn<any, TParent, TContext, TArgs>;
    resolve: SubscriptionResolveFn<TResult, any, TContext, TArgs>;
}
export declare type SubscriptionObject<TResult, TKey extends string, TParent, TContext, TArgs> = SubscriptionSubscriberObject<TResult, TKey, TParent, TContext, TArgs> | SubscriptionResolverObject<TResult, TParent, TContext, TArgs>;
export declare type SubscriptionResolver<TResult, TKey extends string, TParent = {}, TContext = {}, TArgs = {}> = ((...args: any[]) => SubscriptionObject<TResult, TKey, TParent, TContext, TArgs>) | SubscriptionObject<TResult, TKey, TParent, TContext, TArgs>;
export declare type TypeResolveFn<TTypes, TParent = {}, TContext = {}> = (parent: TParent, context: TContext, info: GraphQLResolveInfo) => Maybe<TTypes> | Promise<Maybe<TTypes>>;
export declare type IsTypeOfResolverFn<T = {}> = (obj: T, info: GraphQLResolveInfo) => boolean | Promise<boolean>;
export declare type NextResolverFn<T> = () => Promise<T>;
export declare type DirectiveResolverFn<TResult = {}, TParent = {}, TContext = {}, TArgs = {}> = (next: NextResolverFn<TResult>, parent: TParent, args: TArgs, context: TContext, info: GraphQLResolveInfo) => TResult | Promise<TResult>;
/** Mapping between all available schema types and the resolvers types */
export declare type ResolversTypes = {
    Query: ResolverTypeWrapper<{}>;
    Project: ResolverTypeWrapper<Project>;
    String: ResolverTypeWrapper<Scalars['String']>;
    Int: ResolverTypeWrapper<Scalars['Int']>;
    Task: ResolverTypeWrapper<Task>;
    Tech: ResolverTypeWrapper<Tech>;
    User: ResolverTypeWrapper<User>;
    Taskid: ResolverTypeWrapper<Taskid>;
    Mutation: ResolverTypeWrapper<{}>;
    AuthPayload: ResolverTypeWrapper<AuthPayload>;
    Boolean: ResolverTypeWrapper<Scalars['Boolean']>;
};
/** Mapping between all available schema types and the resolvers parents */
export declare type ResolversParentTypes = {
    Query: {};
    Project: Project;
    String: Scalars['String'];
    Int: Scalars['Int'];
    Task: Task;
    Tech: Tech;
    User: User;
    Taskid: Taskid;
    Mutation: {};
    AuthPayload: AuthPayload;
    Boolean: Scalars['Boolean'];
};
export declare type AuthPayloadResolvers<ContextType = any, ParentType extends ResolversParentTypes['AuthPayload'] = ResolversParentTypes['AuthPayload']> = {
    token?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    user?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType>;
    message?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType>;
};
export declare type MutationResolvers<ContextType = any, ParentType extends ResolversParentTypes['Mutation'] = ResolversParentTypes['Mutation']> = {
    createProject?: Resolver<ResolversTypes['Project'], ParentType, ContextType, RequireFields<MutationCreateProjectArgs, 'beschreibung' | 'name' | 'url' | 'click'>>;
    createTask?: Resolver<ResolversTypes['Task'], ParentType, ContextType, RequireFields<MutationCreateTaskArgs, 'beschreibung' | 'code' | 'name' | 'click'>>;
    createTech?: Resolver<ResolversTypes['Tech'], ParentType, ContextType, RequireFields<MutationCreateTechArgs, 'beschreibung' | 'name' | 'pic'>>;
    createUser?: Resolver<ResolversTypes['AuthPayload'], ParentType, ContextType, RequireFields<MutationCreateUserArgs, 'email' | 'nachname' | 'password' | 'title'>>;
    deleteProject?: Resolver<ResolversTypes['Project'], ParentType, ContextType, RequireFields<MutationDeleteProjectArgs, 'projectId'>>;
    deleteTask?: Resolver<ResolversTypes['Task'], ParentType, ContextType, RequireFields<MutationDeleteTaskArgs, 'taskId'>>;
    deleteTech?: Resolver<ResolversTypes['Tech'], ParentType, ContextType, RequireFields<MutationDeleteTechArgs, 'techId'>>;
    deleteUser?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, RequireFields<MutationDeleteUserArgs, 'userId'>>;
    updateProject?: Resolver<ResolversTypes['Project'], ParentType, ContextType, RequireFields<MutationUpdateProjectArgs, 'beschreibung' | 'name' | 'oldName' | 'url' | 'click'>>;
    updateTask?: Resolver<ResolversTypes['Task'], ParentType, ContextType, RequireFields<MutationUpdateTaskArgs, 'beschreibung' | 'code' | 'name' | 'oldName' | 'click'>>;
    updateTech?: Resolver<ResolversTypes['Tech'], ParentType, ContextType, RequireFields<MutationUpdateTechArgs, 'beschreibung' | 'name' | 'oldName' | 'pic'>>;
    updateUser?: Resolver<ResolversTypes['User'], ParentType, ContextType, RequireFields<MutationUpdateUserArgs, 'email' | 'nachname' | 'oldMail' | 'password' | 'title'>>;
    signIn?: Resolver<ResolversTypes['AuthPayload'], ParentType, ContextType, RequireFields<MutationSignInArgs, 'email' | 'password'>>;
};
export declare type ProjectResolvers<ContextType = any, ParentType extends ResolversParentTypes['Project'] = ResolversParentTypes['Project']> = {
    beschreibung?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    id?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    url?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    click?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType>;
};
export declare type QueryResolvers<ContextType = any, ParentType extends ResolversParentTypes['Query'] = ResolversParentTypes['Query']> = {
    allProjects?: Resolver<Array<ResolversTypes['Project']>, ParentType, ContextType>;
    allTasks?: Resolver<Array<ResolversTypes['Task']>, ParentType, ContextType>;
    allTechs?: Resolver<Array<ResolversTypes['Tech']>, ParentType, ContextType>;
    allUsers?: Resolver<Array<ResolversTypes['User']>, ParentType, ContextType>;
    allTaskIds?: Resolver<Array<ResolversTypes['Taskid']>, ParentType, ContextType>;
    getProject?: Resolver<ResolversTypes['Project'], ParentType, ContextType, RequireFields<QueryGetProjectArgs, 'name'>>;
    getTask?: Resolver<ResolversTypes['Task'], ParentType, ContextType, RequireFields<QueryGetTaskArgs, 'name'>>;
    getTech?: Resolver<ResolversTypes['Tech'], ParentType, ContextType, RequireFields<QueryGetTechArgs, 'name'>>;
    getUser?: Resolver<ResolversTypes['User'], ParentType, ContextType>;
};
export declare type TaskResolvers<ContextType = any, ParentType extends ResolversParentTypes['Task'] = ResolversParentTypes['Task']> = {
    id?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    beschreibung?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    code?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    click?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType>;
};
export declare type TaskidResolvers<ContextType = any, ParentType extends ResolversParentTypes['Taskid'] = ResolversParentTypes['Taskid']> = {
    name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType>;
};
export declare type TechResolvers<ContextType = any, ParentType extends ResolversParentTypes['Tech'] = ResolversParentTypes['Tech']> = {
    beschreibung?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    id?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    pic?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType>;
};
export declare type UserResolvers<ContextType = any, ParentType extends ResolversParentTypes['User'] = ResolversParentTypes['User']> = {
    email?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    id?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    nachname?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    password?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType>;
};
export declare type Resolvers<ContextType = any> = {
    AuthPayload?: AuthPayloadResolvers<ContextType>;
    Mutation?: MutationResolvers<ContextType>;
    Project?: ProjectResolvers<ContextType>;
    Query?: QueryResolvers<ContextType>;
    Task?: TaskResolvers<ContextType>;
    Taskid?: TaskidResolvers<ContextType>;
    Tech?: TechResolvers<ContextType>;
    User?: UserResolvers<ContextType>;
};
/**
 * @deprecated
 * Use "Resolvers" root object instead. If you wish to get "IResolvers", add "typesPrefix: I" to your config.
 */
export declare type IResolvers<ContextType = any> = Resolvers<ContextType>;

          
// This is an extra code in addition to what graphql-codegen makes.
// Users are likely to use 'graphql-tag/loader' with 'graphql-tag/schema/loader'
// in webpack. This code enables the result to be typed.
import { DocumentNode } from 'graphql'
export default typeof DocumentNode
