/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import { core } from "@nexus/schema"
declare global {
  interface NexusGenCustomInputMethods<TypeName extends string> {
    date<FieldName extends string>(fieldName: FieldName, opts?: core.ScalarInputFieldConfig<core.GetGen3<"inputTypes", TypeName, FieldName>>): void // "Date";
  }
}
declare global {
  interface NexusGenCustomOutputMethods<TypeName extends string> {
    date<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "Date";
  }
}
declare global {
  interface NexusGenCustomOutputProperties<TypeName extends string> {
    model: NexusPrisma<TypeName, 'model'>
    crud: any
  }
}

declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
}

export interface NexusGenEnums {
}

export interface NexusGenRootTypes {
  Mutation: {};
  Project: { // root type
    beschreibung?: string | null; // String
    id: number; // Int!
    name: string; // String!
    url: string; // String!
  }
  Query: {};
  Task: { // root type
    beschreibung?: string | null; // String
    code?: string | null; // String
    id: number; // Int!
    name: string; // String!
  }
  Tech: { // root type
    beschreibung?: string | null; // String
    id: number; // Int!
    name: string; // String!
  }
  User: { // root type
    email: string; // String!
    id: number; // Int!
    nachname: string; // String!
    password: string; // String!
    title?: string | null; // String
  }
  String: string;
  Int: number;
  Float: number;
  Boolean: boolean;
  ID: string;
  Date: any;
}

export interface NexusGenAllTypes extends NexusGenRootTypes {
}

export interface NexusGenFieldTypes {
  Mutation: { // field return type
    createProject: NexusGenRootTypes['Project']; // Project!
    createTask: NexusGenRootTypes['Task']; // Task!
    createTech: NexusGenRootTypes['Tech']; // Tech!
    createUser: NexusGenRootTypes['User']; // User!
    deleteProject: NexusGenRootTypes['Project']; // Project!
    deleteTask: NexusGenRootTypes['Task']; // Task!
    deleteTech: NexusGenRootTypes['Tech']; // Tech!
    deleteUser: NexusGenRootTypes['User'] | null; // User
    updateProject: NexusGenRootTypes['Project']; // Project!
    updateTask: NexusGenRootTypes['Task']; // Task!
    updateTech: NexusGenRootTypes['Tech']; // Tech!
    updateUser: NexusGenRootTypes['User'] | null; // User
  }
  Project: { // field return type
    beschreibung: string | null; // String
    id: number; // Int!
    name: string; // String!
    url: string; // String!
  }
  Query: { // field return type
    allProjects: NexusGenRootTypes['Project'][]; // [Project!]!
    allTasks: NexusGenRootTypes['Task'][]; // [Task!]!
    allTechs: NexusGenRootTypes['Tech'][]; // [Tech!]!
    allUsers: NexusGenRootTypes['User'][]; // [User!]!
    getProject: NexusGenRootTypes['Project']; // Project!
    getTask: NexusGenRootTypes['Task']; // Task!
    getTech: NexusGenRootTypes['Tech']; // Tech!
    getUser: NexusGenRootTypes['User']; // User!
  }
  Task: { // field return type
    beschreibung: string | null; // String
    code: string | null; // String
    id: number; // Int!
    name: string; // String!
  }
  Tech: { // field return type
    beschreibung: string | null; // String
    id: number; // Int!
    name: string; // String!
  }
  User: { // field return type
    email: string; // String!
    id: number; // Int!
    nachname: string; // String!
    password: string; // String!
    title: string | null; // String
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    createProject: { // args
      beschreibung: string; // String!
      name: string; // String!
      url: string; // String!
    }
    createTask: { // args
      beschreibung: string; // String!
      code: string; // String!
      name: string; // String!
    }
    createTech: { // args
      beschreibung: string; // String!
      name: string; // String!
    }
    createUser: { // args
      email: string; // String!
      nachname: string; // String!
      password: string; // String!
      title: string; // String!
    }
    deleteProject: { // args
      projectId: number; // Int!
    }
    deleteTask: { // args
      taskId: number; // Int!
    }
    deleteTech: { // args
      techId: number; // Int!
    }
    deleteUser: { // args
      userId: number; // Int!
    }
    updateProject: { // args
      beschreibung: string; // String!
      name: string; // String!
      oldName: string; // String!
      url: string; // String!
    }
    updateTask: { // args
      beschreibung: string; // String!
      code: string; // String!
      name: string; // String!
      oldName: string; // String!
    }
    updateTech: { // args
      beschreibung: string; // String!
      name: string; // String!
      oldName: string; // String!
    }
    updateUser: { // args
      email: string; // String!
      nachname: string; // String!
      oldMail: string; // String!
      password: string; // String!
      title: string; // String!
    }
  }
  Query: {
    getProject: { // args
      name: string; // String!
    }
    getTask: { // args
      name: string; // String!
    }
    getTech: { // args
      name: string; // String!
    }
    getUser: { // args
      email: string; // String!
    }
  }
}

export interface NexusGenAbstractResolveReturnTypes {
}

export interface NexusGenInheritedFields {}

export type NexusGenObjectNames = "Mutation" | "Project" | "Query" | "Task" | "Tech" | "User";

export type NexusGenInputNames = never;

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = "Boolean" | "Date" | "Float" | "ID" | "Int" | "String";

export type NexusGenUnionNames = never;

export interface NexusGenTypes {
  context: any;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  allTypes: NexusGenAllTypes;
  inheritedFields: NexusGenInheritedFields;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractResolveReturn: NexusGenAbstractResolveReturnTypes;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
}